/*     */ package codechicken.nei;
/*     */ 
/*     */ import ModLoader;
/*     */ import codechicken.core.ConfigTag;
/*     */ import java.io.File;
/*     */ import org.lwjgl.opengl.GL11;
/*     */ 
/*     */ public class DropDownFile extends ConfigFile {
/*     */   public ArrayList sortedtags;
/*     */   public int slotwidth;
/*     */   public boolean hasscroll;
/*     */   protected int scrollclicky;
/*     */   protected float scrollpercent;
/*     */   protected int scrollmousey;
/*     */   protected float percentscrolled;
/*     */   protected int lastslotclicked;
/*     */   protected long lastslotclicktime;
/*     */   int x;
/*     */   int y;
/*     */   int height;
/*     */   int width;
/*     */   int contentheight;
/*     */   public boolean hidden;
/*     */   public static final int slotheight = 18;
/*     */   
/*  26 */   public DropDownFile(File file) { super(file);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 507 */     this.sortedtags = new ArrayList();
/*     */     
/* 509 */     this.slotwidth = 0;
/*     */ 
/*     */     
/* 512 */     this.scrollclicky = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 517 */     this.lastslotclicked = -1; }
/*     */   public SubSetRangeTag getTag(String tagname) { return (SubSetRangeTag)super.getTag(tagname); }
/*     */   public SubSetRangeTag getTag(String tagname, boolean createnew) { return (SubSetRangeTag)super.getTag(tagname, createnew); }
/*     */   public SubSetRangeTag getNewTag(String name) { return new SubSetRangeTag(this, name); }
/*     */   public void saveConfig() { super.saveConfig(); }
/*     */   public boolean thisContains(int mousex, int mousey) { if (mousex >= this.x && mousex < this.x + this.width && mousey >= this.y && mousey <= this.y + this.height) return true;  return false; }
/*     */   public boolean contains(int mousex, int mousey) { if (thisContains(mousex, mousey)) return true;  for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; if (stag.contains(mousex, mousey)) return true;  }  return false; }
/*     */   public int getScrollBarWidth() { return 5; }
/*     */   public int getScrollBarHeight() { int sbarh = (int)(this.height / this.contentheight * this.height); if (sbarh > this.height) return this.height;  if (sbarh < this.height / 15) return this.height / 15;  return sbarh; }
/*     */   public int getScrolledSlots() { int slots = this.maintags.size(); int shownslots = this.height / 18; return (int)(this.percentscrolled * (slots - shownslots) + 0.5F); }
/*     */   private int getClickedSlot(int mousey) { return (mousey - this.y) / 18 + getScrolledSlots(); }
/*     */   public void calculatePercentScrolled() { int barempty = this.height - getScrollBarHeight(); if (this.scrollclicky >= 0) { int scrolldiff = this.scrollmousey - this.scrollclicky; this.percentscrolled = scrolldiff / barempty + this.scrollpercent; }  if (this.percentscrolled < 0.0F) this.percentscrolled = 0.0F;  if (this.percentscrolled > 1.0F) this.percentscrolled = 1.0F;  int sbary = this.y + (int)((barempty * this.percentscrolled) + 0.5D); this.percentscrolled = (sbary - this.y) / barempty; }
/*     */   public void processScrollMouse(int mousex, int mousey) { if (this.scrollclicky >= 0) { int scrolldiff = mousey - this.scrollclicky; int barupallowed = (int)(((this.height - getScrollBarHeight()) * this.scrollpercent) + 0.5D); int bardownallowed = this.height - getScrollBarHeight() - barupallowed; if (-scrolldiff > barupallowed) { this.scrollmousey = this.scrollclicky - barupallowed; } else if (scrolldiff > bardownallowed) { this.scrollmousey = this.scrollclicky + bardownallowed; } else { this.scrollmousey = mousey; }  calculatePercentScrolled(); }  }
/*     */   public String updateMouseOver(int mousex, int mousey, String mouseovername) { processScrollMouse(mousex, mousey); String currentmouseover = ""; int sloty = this.y; int slotx = this.x + (this.hasscroll ? getScrollBarWidth() : 0); int slot = 0; for (ConfigTag tag : this.sortedtags) { slot++; if (slot <= getScrolledSlots()) continue;  SubSetRangeTag stag = (SubSetRangeTag)tag; if (slotx <= mousex && this.x + this.width > mousex && sloty <= mousey && sloty + 18 > mousey) currentmouseover = stag.qualifiedname;  String s = stag.updateMouseOver(mousex, mousey, mouseovername); if (!s.equals(""))
/* 531 */         currentmouseover = s;  sloty += 18; }  return currentmouseover; } public static DropDownFile dropDownInstance = new DropDownFile(new File(Minecraft.b(), "config/NEISubset.cfg"));
/* 532 */   public boolean click(int mousex, int mousey, int button) { boolean inbounds = thisContains(mousex, mousey); if (!inbounds) for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; stag.click(mousex, mousey, button); }   int barempty = this.height - getScrollBarHeight(); int sbary = this.y + (int)((barempty * this.percentscrolled) + 0.5D); int contentx = this.x + getScrollBarWidth(); if (this.hasscroll && button == 0 && getScrollBarHeight() < this.height && mousex >= this.x && mousex <= this.x + getScrollBarWidth() && mousey >= this.y && mousey <= this.y + this.height) { if (mousey < sbary) { this.percentscrolled = (mousey - this.y) / barempty; calculatePercentScrolled(); } else if (mousey > sbary + getScrollBarHeight()) { this.percentscrolled = (mousey - this.y - getScrollBarHeight() + 1) / barempty; calculatePercentScrolled(); } else { this.scrollclicky = mousey; this.scrollpercent = this.percentscrolled; this.scrollmousey = mousey; }  } else if (mousex >= contentx && mousex < this.x + this.width && mousey >= this.y && mousey <= this.y + this.height) { int slot = getClickedSlot(mousey); if (slot == this.lastslotclicked && System.currentTimeMillis() - this.lastslotclicktime < 500L && button == 0) { slotClicked(slot, button, true); } else { slotClicked(slot, button, false); }  if (button == 0) { this.lastslotclicked = slot; this.lastslotclicktime = System.currentTimeMillis(); }  }  return true; } public void onMouseWheel(int i) { if (this.scrollclicky != -1) return;  for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; if (stag.expanded) { stag.onMouseWheel(i); return; }  }  this.scrollpercent += i / this.contentheight * 10.0F; if (this.scrollpercent > 1.0F) { this.scrollpercent = 1.0F; } else if (this.scrollpercent < 0.0F) { this.scrollpercent = 0.0F; }  } private void slotClicked(int slot, int button, boolean doubleclick) { int i = 0; for (ConfigTag tag : this.sortedtags) { if (slot == i) { SubSetRangeTag stag = (SubSetRangeTag)tag; stag.onClick(button, doubleclick); return; }  i++; }  } public void hideAllItems() { for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; stag.hideAllItems(); }  } public void showAllItems() { for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; stag.showAllItems(); }  } public void mouseUp(int mousex, int mousey, int button) { if (this.scrollclicky >= 0 && button == 0) this.scrollclicky = -1;  for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; stag.mouseUp(mousex, mousey, button); }  } public void draw(GuiManager gui, int mousex, int mousey) { drawScrollBar(gui); int drawy = this.y; int drawx = this.x + (this.hasscroll ? getScrollBarWidth() : 0); int slot = 0; for (ConfigTag tag : this.sortedtags) { slot++; if (slot <= getScrolledSlots()) continue;  SubSetRangeTag stag = (SubSetRangeTag)tag; if (!this.hidden) if (!DropDownWidget.texturedButtons) { boolean contains = (mousex >= drawx && mousex < drawx + this.slotwidth && mousey >= drawy && mousey < drawy + 18); gui.drawRect(drawx, drawy, this.slotwidth, 18, contains ? -12578808 : -16777216); gui.drawTextCentered(drawx, drawy, this.slotwidth, 18, stag.name, stag.getColourFromState(), (stag.state == 0)); } else { GL11.glBindTexture(3553, (gui.window.mc()).p.b("/gui/gui.png")); if (stag.state == 1) { GL11.glColor4f(0.65F, 0.65F, 0.65F, 1.0F); } else { GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F); }  int tex = (stag.state == 0) ? 0 : 1; gui.drawButtonBackground(drawx, drawy, this.slotwidth, 18, false, tex); int textcolour = (stag.state == 2) ? -2039584 : -6250336; gui.drawTextCentered(drawx, drawy, this.slotwidth, 18, stag.name, textcolour); }   stag.draw(gui, mousex, mousey); drawy += 18; if (drawy >= this.y + this.height) break;  }  } private void drawScrollBar(GuiManager gui) { if (this.hasscroll && !this.hidden) { int sbary = this.y + (int)(((this.height - getScrollBarHeight()) * this.percentscrolled) + 0.5D); gui.drawRect(this.x, this.y, 5, this.height, -14671840); if (DropDownWidget.texturedButtons) { gui.drawRect(this.x, sbary, 5, getScrollBarHeight(), -7631989); gui.drawRect(this.x, sbary, 4, getScrollBarHeight() - 1, -986896); gui.drawRect(this.x + 1, sbary + 1, 4, getScrollBarHeight() - 1, -11184811); gui.drawRect(this.x + 1, sbary + 1, 3, getScrollBarHeight() - 2, -3750202); } else { gui.drawRect(this.x, sbary, 5, getScrollBarHeight(), -2039584); }  }  } public void position(int px, int py) { this.x = px; this.y = py; recalcSize(); int suby = this.y; int subx = this.x + this.width; int slot = 0; for (ConfigTag tag : this.sortedtags) { slot++; if (slot <= getScrolledSlots()) continue;  SubSetRangeTag stag = (SubSetRangeTag)tag; stag.position(subx, suby); suby += 18; if (suby >= this.y + this.height) break;  }  } public void recalcSize() { int maxheight = (ModLoader.getMinecraftInstance()).s.r - this.y; this.contentheight = this.maintags.size() * 18; if (this.contentheight > maxheight) { this.height = maxheight / 18 * 18; this.hasscroll = true; } else { this.hasscroll = false; this.height = this.contentheight; }  this.slotwidth = 0; nl fontRenderer = (ModLoader.getMinecraftInstance()).q; for (ConfigTag tag : this.sortedtags) { int tagwidth = fontRenderer.a(tag.name); if (tagwidth > this.slotwidth) this.slotwidth = tagwidth;  }  this.slotwidth += 2; this.width = this.slotwidth; if (this.hasscroll) this.width += 5;  int totalwidth = this.x + this.width - LayoutManager.dropDown.x; this.hidden = (totalwidth <= 0); } public void resetHashes() { this.sortedtags = ConfigFile.getSortedTagList(this.maintags); for (ConfigTag tag : this.sortedtags) ((SubSetRangeTag)tag).resetHashes();  } public void updateState() { ItemVisibilityHash vis = NEIConfig.vishash; for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; stag.updateState(vis); }  } public void addItemIfInRange(int item, int damage, ady compound) { for (ConfigTag tag : this.sortedtags) ((SubSetRangeTag)tag).addItemIfInRange(item, damage, compound);  } public int getWidthAtLevel(int hiddenlevel) { if (hiddenlevel == 0) return this.width;  for (ConfigTag tag : this.sortedtags) { SubSetRangeTag stag = (SubSetRangeTag)tag; int subwidth = stag.getWidthAtLevel(hiddenlevel - 1); if (subwidth != 0) return subwidth;  }  return 0; } static { dropDownInstance.setComment("You can put your own custom SubSet Ranges in here:Follow the following format (replace {something} with what you want.:{Parent}.{Name}=[{item1}],[{item2}],[{item3}-{item4}],[{item5}::{damage}],[{item6}::{damage1}-{damage2}]:Eg. Blocks.Nether = [87-89],[112-115]:Eg2. Birch = [17::2],[6::2]"); }
/*     */ 
/*     */ }


/* Location:              C:\Users\na_th_an\Downloads\NotEnoughItems-Client 1.3.zip!\codechicken\nei\DropDownFile.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */